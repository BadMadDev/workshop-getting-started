@{
    ViewData["Title"] = "Schritt 1";
}

<div class="text-center">
    <h2 class="display-4">Tutorial</h2>
    <h3>Schritt 1: Eine kurze Erläuterung</h3>
</div>

<div class="text-left">
    <p>
        Schauen wir uns jetzt den Befehl, den wir zum Starten des Containers verwendet haben einmal genauer an.<br />
        docker run an sich ist der Befehl um docker mitzuteilen einen Container zu starten. Dabei haben wir eine Ausgabe erhalten, die dem Folgenden ähnelt:<br />
        <div class="badge-dark">
            <div role="listitem" tabindex="-1" aria-posinset="22" aria-setsize="42" style="height: 17px;">$ docker run -d -p 80:80 maddev77/workshop-getting-started</div>
            <div role="listitem" tabindex="-1" aria-posinset="23" aria-setsize="42" style="height: 17px;">Unable to find image 'maddev77/workshop-getting-started:latest' locally</div>
            <div role="listitem" tabindex="-1" aria-posinset="24" aria-setsize="42" style="height: 17px;">latest: Pulling from maddev77/workshop-getting-started</div>
            <div role="listitem" tabindex="-1" aria-posinset="25" aria-setsize="42" style="height: 17px;">a076a628af6f: Pull complete </div>
            <div role="listitem" tabindex="-1" aria-posinset="26" aria-setsize="42" style="height: 17px;">e79f147a4676: Pull complete </div>
            <div role="listitem" tabindex="-1" aria-posinset="27" aria-setsize="42" style="height: 17px;">9b3ac742235a: Pull complete </div>
            <div role="listitem" tabindex="-1" aria-posinset="28" aria-setsize="42" style="height: 17px;">f6dc7f655a1d: Pull complete </div>
            <div role="listitem" tabindex="-1" aria-posinset="29" aria-setsize="42" style="height: 17px;">f9544f1b1fca: Pull complete </div>
            <div role="listitem" tabindex="-1" aria-posinset="30" aria-setsize="42" style="height: 17px;">abcfcb76880c: Pull complete </div>
            <div role="listitem" tabindex="-1" aria-posinset="31" aria-setsize="42" style="height: 17px;">e82cfa1a6cd6: Pull complete </div>
            <div role="listitem" tabindex="-1" aria-posinset="32" aria-setsize="42" style="height: 17px;">Digest: sha256:a37b1bcd240d48fe1aa4f3f83da4c8cf410a8f6900a530afe94a610741a2b8f1</div>
            <div role="listitem" tabindex="-1" aria-posinset="33" aria-setsize="42" style="height: 17px;">Status: Downloaded newer image for maddev77/workshop-getting-started:latest</div>
            <div role="listitem" tabindex="-1" aria-posinset="34" aria-setsize="42" style="height: 17px;">6a5681b1bba27b4481e39e08625cbc8889d0234e4f2e78b283ada0d9beda22d0</div>
        </div>
    </p>
    <p>
        Bevor docker den Container ausführt, wird zunächst geprüft, ob das Image überhaupt lokal verfügbar ist.<br />
        Anhand der ersten Zeile können wir sehen, dass das Image auf dem Host lokal zunächst noch nicht vorhanden ist. Kein Wunder, wir haben ja auch kurz zuvor erst unsere Serverinstanz erzeugt.
        Interessant an der ersten Zeile ist jedoch auch, dass unserer Angabe zum Image <b>:latest</b> angefügt wurde.
        Darüber wird das Tag des Images (dessen Name) bestimmt. Da wir in unserem Befehl kein Tag angegeben haben, verwendet docker standardmässig das Tag 'latest'.
        Im docker hub bekommt jeder Benutzer einen eigenen Bereich für seine Sammlung von Repositories. Der Name entspricht der Docker ID.
        Mit der Angabe von <b>maddev77</b> beziehen wir uns also auf meine Sammlung von Repositories.<br />
        Anhand der zweiten Zeile erkennen wir, das das Image aus der Registry heruntergeladen wird.
        Die nächsten Zeilen geben uns Auskunft über den Status des Downloads. Unser Image besteht aus mehreren Layern, deshalb erhalten wir zu jedem Layer eine entsprechende Ausgabe.
        Die Funktionsweise von Images und Layern soll uns derzeit aber erstmal noch nicht interessieren. Hierüber später mehr.
        Für den Moment ist es ausreichend zu wissen, dass eine Image-Datei aus mehreren Schichten bestehen kann.<br />
    </p>

    <p>
        Wenden wir uns jetzt den einzelnen Parametern zu.
        Die Angabe von Parametern kann über eine Langform sowie (meistens) einer Kurzform erfolgen. In diesem Workshop wird - wenn vorhanden - immer die Kurzform verwendet.
        <div class="table">
            <table>
                <tr>
                    <th>Parameter</th>
                    <th>Parameter (Langform)</th>
                    <th>Beschreibung</th>
                </tr>
                <tr>
                    <td>-d</td>
                    <td>--detached</td>
                    <td>Started den Container im Hintergrund, abgekoppelt von der Konsole. Ohne diese Angabe läuft der Container im Vordergrund und bindet die Konsole an die Standardausgabe des Containers.</td>
                </tr>
                <tr>
                    <td>-p 80:80</td>
                    <td>--publish</td>
                    <td>
                        Veröffentlicht einen Port im Container mittels Port-Mapping.
                        Mit einem Port-Mapping weisen wir einen Port der Host-Maschine einen Port im Container zu. Die linke Seite gibt dabei die Portnummer des Host an, die rechte Seite bestimmt die Portnummer im Container.<br />
                        Wir weisen hier also den Port 80 des Hosts dem Port 80 des Container zu, der an diesem Port die Website bereitstellt. Hierüber ist es uns möglich von ausserhalb des Containers die Website aufzurufen.
                        Würden wir z.B. den Port 80 des Containers an Port 8000 des Hosts verfügbar machen wollen, würde der Paramateraufruf <code class="highlight">-p 8000:80</code> lauten müssen.
                        Der Parameter kann dabei mehrfach angegeben werden, um mehrere Ports des Containers am Host verfügbar zu machen. Ohne diese Angabe ist der Container nicht zu erreichen. Wir erinnern uns, Container laufen zunächst vollständig isoliert!
                    </td>
                </tr>
            </table>
        </div>
    <p>Wir lernen im Verlauf des Workshops noch weitere Parameter kennen. Diesen widmen wir uns, sobald es zu dessen Verwendung kommt.</p>
    <p>Eine detailierte Beschreibung zu <b>docker run</b> und seinen Parametern ist zu finden unter:  <a href="https://docs.docker.com/engine/reference/run/">https://docs.docker.com/engine/reference/run/</a></p>
   
    <h2 id="next-steps">Nächste Schritte</h2>
    <ul>
        <li>Werfe einen Blick auf das Repository für den Container auf <a href="https://hub.docker.com/u/maddev77">docker hub</a>.</li>
        <li>Erfahre mehr über Container-Zustände in <a href="~/Tutorial/Persistence">Schritt 2: Persistenz</a></li>
    </ul>

</div>
