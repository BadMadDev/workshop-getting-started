
@{
    ViewData["Title"] = "Persistence";
}


<div class="text-center">
    <h2 class="display-4">Tutorial</h2>
    <h3>Schritt 2: Persistenz</h3>
</div>

<div class="text-left">
    <p>
        Bevor wir uns mit der Persistenz von Container genauer beschäftigen, errinern wir uns zunächst noch einmal an Folgendes:<br/>
        Container laufen isoliert.<br/>
        In unserem konkreten Fall bzgl. der Peristenz bedeutet dies, dass das Dateisystem des Containers ebenfalls isoliert ist.<br/>
        Das inkludiert auch Container untereinander. Was bedeutet, dass zwei Containerinstanzen, auch wenn sie vom gleichen Image erstellt wurden, kein Zugriff auf das Dateisystem des anderen Containers haben.<br/>
        Da das  Dateisystem Bestandteil des Containers ist, werden alle Dateien und somit Daten ebenfalls gelöscht, wenn der Container gelöscht wird.<br/>
        Für zustandslose Anwendungen ideal. Aber was machen wir bei Anwendungen, die Zustände dauerhaft persistieren müssen?
        Bevor wir uns mit der Lösung beschäftigen,  überprüfen wir zuerst einmal die getätigten Aussagen.
    </p>
    
    <h2>Schauen wir uns das einmal genauer an</h2>
    <p>
        Dazu starten wir zunächst eine neue Serverinstanz über <code class="highlight">+ ADD NEW INSTANCE</code><br/>
        Danach starten wir auf der neuen Instanz unseren Container mittels <code class="highlight">docker run -d -p 80:80 maddev77/workshop-getting-started</code>
        Wie bekannt öffnen wir jetzt die Website und wählen <code class="highlight">To Do</code>. Hier erfassen wir einfach mal 1-2 Einträge<br/>
        Wenn wir den Container herunterfahren und neu starten, werden wir zunächst wieder die Einträge sehen können.<br/>
        Um den Container herunterzufahren müssen wir erstmal den Namen des Containers ermitteln. Docker vergibt einen zufällig generierten Namen für jede Containerinstanz, wenn kein Name spezifiziert wird.<br/>
        Optional kann man den Namen über den Parameter <code class="highlight">--name</code> spezifizieren.<br/>
        Stellen wir aber zunächst den vergebenen Containernamen fest indem wir uns eine Listeder Container ausgeben lassen: <code class="highlight">docker container ls</code> listet die laufenden Container auf.
        Jetzt können wir Containerinstanz über den Namen löschen.<br/>
        Dazu verwenden wir den Befehl: <code class="highlight">docker rm &lt;CONTAINER_NAME&gt; --force</code>
        Mit dem Parameter <code class="highlight">--force</code> erzwingen wir das Entfernen, auch wenn der Container noch gestartet ist.
        Alternativ dazu könnten wir den Container zunächst mittels <code class="highlight">docker stop &lt;CONTAINER_NAME&gt;</code> stoppen.
    </p>
    <p>
        Durch das Entfernen sind jetzt auch die Einträge nicht mehr vorhanden.<br/>
        Prüfen wir das einfach durch einen neuen Aufruf. Dazu verwenden wir den uns mittlerweile vertrautem Aufruf: <code class="highlight">docker run -d -p 80:80 --name WebSite1 maddev77/workshop-getting-started</code><br/>
    </p>
    <p>
        Um zu sehen, dass das Dateisystem auch zwischen mehreren Instanzen nicht geteilt wird, erfassen wir zunächst in der laufenden Instanz 1-2 neue Einträge.
        Als nächstes starten wir eine weitere Instanz unseres Containers. Dieses binden wir an den Port 90, da der Port 80 durch die erste Instanz belegt ist.
        Der Vollständigkeithalber vergeben wir für die zweite Instanz einfach mal einen eigenen Namen.
        Dies erreichen wir über <code class="highlight">docker run -d -p 90:80 maddev77/workshop-getting-started --name WebSite2</code><br/>
        In dem o.a. Bespiel wird Name <code class="highlight">WebSite2</code> verwendet.
        Wenn wir jetzt die Website über Port 90 öffnen und <code class="highlight">To do</code> wählen, sehen wir eine leere Liste. <br/>
        Der Grund dafür ist, dass das Dateisystem zwischen den Container isoliert läuft.<br/>
    </p>
    <p>
        Für die nächsten Schritte löschen wir zunächst unsere zwei erstellten Containerinstanzen.
        <code class="highlight">docker rm WebSite1 --force</code>
        <code class="highlight">docker rm WebSite2 --force</code>
    </p>

    <h2 id="next-steps">Nächste Schritte</h2>
    <ul>
        <li>Container Volumnes: <a href="./Persistence1">Named Volumes</a></li>
    </ul>

</div>
