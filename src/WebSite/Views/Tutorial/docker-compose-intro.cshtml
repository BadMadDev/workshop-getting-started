
@{
    ViewData["Title"] = "Persistence";
}


<div class="text-center">
    <h2 class="display-4">Tutorial</h2>
    <h3>Schritt 4: Einführung in docker-compose</h3>
</div>

<div class="text-left">
    <p>
        Docker Compose ist ein Tool das dazu entwickelt wurde, Lösungen aus mehreren Containern zu beschreiben und zu teilen.<br/>
        Mit Docker Compose können wir eine einzele YAML Datei erstellen, die unsere Anwendung definiert und über ein einzelnes Kommando starten, beenden und aktualisieren kann.
    </p>

    <h2>Installation von Docker Compose</h2>
    <p>
        Mit der Installation von Docker auf Windows oder Mac wurde ebenfalls Docker Compose installiert.<br/>
        Für Linux findet man die <a href="https://docs.docker.com/compose/install/"> Installation-Anweisung hier</a>.<br/>
        Auf unserem Playground ist Docker Compose ebenfalls bereits installiert.
    </p>
    
    <h2>Erzeugen einer Docker Compose Datei</h2>
    <p>
        To be continued...<br/><br/>
    </p>
    
    <p>
        Der Einfachkeit halber habe ich eine Docker Compose Datei für unsere Anwendung bereits erstellt.<br/>
        Gucken wir uns diese einmal im Detail an.<br/>
        Der Quellcode zu unseren Anwendung und der darin enthalten Docker Compose Datei ist auf <a href="">GitHub</a> verfügbar.<br/>
        Da wir für die weiteren Schritte wie z.B. Continious Integration (CI) und Continous Deployment (CD) das Repository benötigen ist dies ein guter Zeitpunkt für den Download.
        <ol>
            <li>
                Abrufen des Repoitories mittels git<br/>
                <code class="highlight">git clone https://github.com/BadMadDev/workshop-getting-started.git</code>
            </li>
        </ol>
    </p>
    
    
    <h2>Erstellen eines Netzwerkes für die Kommunikation der Container untereinander</h2>
    <p>
        In den nächsten Schritten bedienen wir uns einer Lösung, die aus 2 Containeranwendungen besteht.<br/>
        Die erste Anwendung ist ein Web-Frontend, die als Benutzerschnittstelle für  die Verwaltung von To-Do-Einträge dient.<br/>
        Wir kennen diese ja bereits aus den bisherigen Schritten.<br/>
        Diesmal allerdings werden wir die bestehende Anwendung so konfigurieren, dass diese ihre Daten in einer eigenen SQL-Datenbank speichert, dazu also mit einem Microsoft SQL-Server kommunizieren muss.
    </p>
    <p>
        Von Microsoft wird der SQL-Server auch als Docker-Image bereitgestellt.<br/>
        Für unser Tutorial verwenden wir das Linux-Image für den SQL-Server 2019 als zweite Container-Anwendung.<br/>
    </p>
    <h2>Schritt-für-Schritt Anleitung</h2>
    <ol>
        <li>
            Erstellen einer neuen Serverinstanz <code class="highlight">+ NEW INSTANCE</code>
        </li>
        <li>
            Erstellen eines benannten Netzwerkes
            <code class="highlight">docker network create todo-net</code>
        </li>
        <li>
            Starten von SQL-Server und verbinden mit dem Netzwerk
            <code class="highlight">docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=P@ssw0rd123!' -p 1433:1433 -d --network todo-net --network-alias sqldb mcr.microsoft.com/mssql/server:2019-latest</code>
        </li>
        <li>
            Starten der Tutorial-Lösung<br/>
            Diemal starten wir die Tutorial-Instanz und verbinden die mit dem gleichen Netzwerk wie den SQL-Server. Zudem übergeben wir einen weiteren Parameter, der besagt, das das Tutorial den SQL-Server als Backend verwenden soll.
            <code class="highlight">docker run -d -p 80:80 --network todo-net -e USE_SQL_SERVER=true maddev77/workshop-getting-started</code>

        </li>
    </ol>
    <p>
        Nachdem wie oben angegeben beide Containerinstanzen gestartet sind, können wir wie bisher ein paar To-Do-Einträge erfassen.<br/>
        Diesmal jedoch werden die Einträge in der Datenbank auf der SQL-Server-Instanz gespeichert.<br/>
        Bevor wir fortfahren, gucken wir uns das Ganze einmal genauer an...
    </p>

    <h2 id="next-steps">Nächste Schritte</h2>
    <ul>
        <li>Container Orchestrierung: <a href="./docker-compose-intro">Einführung in: docker-compose</a></li>
    </ul>

</div>
