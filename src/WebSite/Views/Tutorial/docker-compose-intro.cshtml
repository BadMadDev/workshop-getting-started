
@{
    ViewData["Title"] = "Persistence";
}


<div class="text-center">
    <h2 class="display-4">Tutorial</h2>
    <h3>Schritt 4: Einführung in docker-compose</h3>
</div>

<div class="text-left">
    <p>
        Docker Compose ist ein Tool das dazu entwickelt wurde, Lösungen aus mehreren Containern zu beschreiben und zu teilen.<br/>
        Mit Docker Compose können wir eine einzele YAML Datei erstellen, die unsere Anwendung definiert und über ein einzelnes Kommando starten, beenden und aktualisieren kann.
    </p>

    <h2>Installation von Docker Compose</h2>
    <p>
        Mit der Installation von Docker auf Windows oder Mac wurde ebenfalls Docker Compose installiert.<br/>
        Für Linux findet man die <a href="https://docs.docker.com/compose/install/"> Installation-Anweisung hier</a>.<br/>
        Auf unserem Playground ist Docker Compose ebenfalls bereits installiert.
    </p>
    
    <h2>Erzeugen einer Docker Compose Datei</h2>
    <p>
        Die wenigsten werden eine Docker Compose Datei von Grund auf neu erstellen, oft liefern Multi-Container-Lösungen diese bereits mit und das Thema richtig sich eher an Entwickler.<br/>
        Dennoch sollten wir zum besseren Verständnis einmal beispielshaft eine solche Datei von Grnd auf im Groben erstellen.
    </p>
    
    <h4>Erstellen der Docker Compose Datei</h4>
    <ol>
        <li>
            Anlegen einer leeren Datei<br/>
            <code class="highlight">cat >docker-compose.yml</code>
        </li>
        <li>
            Bearbeiten der Datei im Editor
            Über die <code class="highlight">EDITOR</code> Schaltfläche den Editor aufrufen<br/>
            und die erstellte Datei auf der linken Seite anklicken
        </li>
        <li>
            Wir starten mit der Angabe der Schema Version. In den meisten Fällen ist es am Besten die aktuell neueste Version zu nutzen.
        <code class="highlight">version: '3.8'</code>
        </li>
    </ol>

    <h4>Definieren der Anwendungsdienste</h4>
    <p>
        Rufen wir uns zunächst den Befehl zum Starten unseres Containers ins Gedächnis:
        <code class="highlight">docker run -d -p 80:80 --network todo-net -e USE_SQL_SERVER=true maddev77/workshop-getting-started</code>
        <ol>
            <li>
                Zuerst müssen wir den Diensteintrag und das Image definieren<br />
                <div class="highlight">
                    <code class="highlight">version: '3.8'</code><br />
                    <code class="highlight">services:</code><br />
                    <div style="text-indent:10px;"><code class="highlight">app:</code></div>
                    <div style="text-indent:20px;"><code class="highlight">image: maddev77/workshop-getting-started:linux-latest</code></div>
                </div>
            </li>
            <li>
                Als nächsten definieren wir unser Port-Mapping
                <div class="highlight">
                    <code class="highlight">version: '3.8'</code><br />
                    <code class="highlight">services:</code><br />
                    <div style="text-indent:10px;"><code class="highlight">app:</code></div>
                    <div style="text-indent:20px;"><code class="highlight"></code>image: maddev77/workshop-getting-started:linux-latest</div>
                    <div style="text-indent:20px;"><code class="highlight"></code>ports:</div>
                    <div style="text-indent:30px;"><code class="highlight"></code>- 80:80</div>
                </div>
            </li>
            <li>
                Dann definieren wir das Netzwerk
                <div class="highlight">
                    <code class="highlight">version: '3.8'</code><br />
                    <code class="highlight">services:</code><br />
                    <div style="text-indent:10px;"><code class="highlight">app:</code></div>
                    <div style="text-indent:20px;"><code class="highlight">image: maddev77/workshop-getting-started:linux-latest</code></div>
                    <div style="text-indent:20px;"><code class="highlight">ports:</code></div>
                    <div style="text-indent:30px;"><code class="highlight">- 80:80</code></div>
                    <div style="text-indent:20px;"><code class="highlight">networks:</code></div>
                    <div style="text-indent:30px;"><code class="highlight">- todo-net</code></div>
                </div>
            </li>
            <li>
                Und noch die Umgebungsvariable
                <div class="highlight">
                    <code class="highlight">version: '3.8'</code><br />
                    <code class="highlight">services:</code><br />
                    <div style="text-indent:10px;"><code class="highlight">app:</code></div>
                    <div style="text-indent:20px;"><code class="highlight">image: maddev77/workshop-getting-started:linux-latest</code></div>
                    <div style="text-indent:30px;"><code class="highlight">- 80:80</code></div>
                    <div style="text-indent:20px;"><code class="highlight">networks:</code></div>
                    <div style="text-indent:30px;"><code class="highlight">- todo-net</code></div>
                    <div style="text-indent:20px;"><code class="highlight">environment:</code></div>
                    <div style="text-indent:30px;"><code class="highlight">USE_SQL_SERVER=true</code></div>
                </div>
            </li>
            <li>
                Zu guter Letzt müssen wir noch die zu erstellen Netzwerke bekannt geben
                <div class="highlight">
                    <code class="highlight">version: '3.8'</code><br />
                    <code class="highlight">services:</code><br />
                    <div style="text-indent:10px;"><code class="highlight">app:</code></div>
                    <div style="text-indent:20px;"><code class="highlight">image: maddev77/workshop-getting-started:linux-latest</code></div>
                    <div style="text-indent:20px;"><code class="highlight">ports:</code></div>
                    <div style="text-indent:30px;"><code class="highlight">- 80:80</code></div>
                    <div style="text-indent:20px;"><code class="highlight">networks:</code></div>
                    <div style="text-indent:30px;"><code class="highlight">- todo-net</code></div>
                    <div style="text-indent:20px;"><code class="highlight">environment:</code></div>
                    <div style="text-indent:30px;"><code class="highlight">USE_SQL_SERVER=true</code></div>
                    <code class="highlight">networks:</code><br />
                    <div style="text-indent:10px;"><code class="highlight">todo-net:</code></div><br />
                    Hier können auch verschiedene Konfigurationparameter für das Netzwerk definiert werden.
                    Ähnliches gilt auch für Volumes.
                </div>
            </li>
        </ol>
        Das Ganze müssen wir entsprechend noch für den SQL-Server durchführen. Aber genug der Handarbeit...
    </p>
    
    <h3>Anwenden der Docker Compose Datei</h3>
    <p>
        Eine Docker Compose Datei für die Bereitstellung unserer Anwendung habe ich bereits erstellt.<br/>
        Gucken wir uns diese einmal im Detail an.<br/>
        Die Compose Datei ist in einem extra Repository welches nur für die Bereitstellung dient hinterlegt<br/>
        Somit werden Änderungen über die Quellcodeverwaltung verfolgt und die Datei ist einfach über git abzurufen.
        Das Repository kann ebenfalls auf<a href="https://github.com/BadMadDev/workshop-getting-started-deploy">GitHub</a> eingesehen werden.<br/>
        <ol>
            <li>
                Abrufen des Repoitories mittels git<br/>
                <code class="highlight">git clone https://github.com/BadMadDev/workshop-getting-started-deploy</code>
            </li>
            <li>
                Einen Blick in die Datei ist im Playground über den Aufruf des Editors direkt möglich
            </li>
        </ol>
    </p>
    
    <p>
        Mit der Docker Compose Datei ist es jetzt sehr einfach die Container zu starten.
        <ol>
            <li>
                Wechseln in das Verzeichnis mit der Docker Compose Datei<br/>
                <code class="highlight">cd workshop-getting-started-deploy</code>
            </li>
            <li>
                Starten der Container mittels docker-compose<br/>
                <code class="highlight">docker-compose up -d</code><br/>
                Fertig! :)
            </li>
        </ol>
    </p>

    <p>
        Das Herunterfahren der Container ist jetzt ebenfalls genauso einfach möglich.<br/>
        <code class="highlight">docker-compose up -d</code>
    </p>

    <p>
        Auch das Aktualisieren der Anwendung ist genau so simpel.<br/>
        <code class="highlight">docker-compose pull</code> überprüft ob neue Images in der Registry vorhanden sind und lädt diese bei Bedarf herunter.
    </p>

    <h2>Zusammenfassung</h2>
    <p>
        Wir haben gelernt, wie einfach es ist, mit docker-compose Anwednungen bestehend aus mehreren Container zu starten.<br/>
        Das Ganze ist über einen einzigen Aufruf möglich.<br/>
        Was wir bisher über docker-compose gelernt haben hilft uns erstmal enorm, folgt allerdings noch nicht den Best Practices.<br/>
        Um unterschiedlichen Szenarien gerecht zu werden (z.B. zwischen der Entwicklungsumgebung, der Produktionsumgebung aber auch der Situation beim Kunden) ist es möglich die Docker Compose Datei aufzuteilen.<br/>
        Im Prinzip erstellt man dazu eine Datei mit den Angaben, die für jede Umgebung immer gleich sind und eine weitere Datei, die die unterschiedlichen Parameter definiert.<br/>
        Wir gucken uns gleich auch noch genau an, vorher möchte ich aber noch auf ein nützliches Tool eingehen.
    </p>

    <h2 id="next-steps">Nächste Schritte</h2>
    <ul>
        <li>Eine grafische Oberfläche für die Container-Verwaltung namens <a href="./Portainer">Portainer</a></li>
    </ul>

</div>
