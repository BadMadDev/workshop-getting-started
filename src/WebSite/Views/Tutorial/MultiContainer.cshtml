
@{
    ViewData["Title"] = "Persistence";
}


<div class="text-center">
    <h2 class="display-4">Tutorial</h2>
    <h3>Schritt 3: Einführung in Docker-Netzwerke</h3>
</div>

<div class="text-left">
    <p>
        In diesem Kapitel widmen wir uns der Ausführung zweier Container-Anwendungen, die miteinander über das Netzwerk kommunizieren.<br/>
        Dazu rufen wir uns zunächst wieder ins Gedächnis: Container laufen isoliert.<br/>
        Für dieses Fall bedeutet dies: Ein Container kann zunächst nicht mit anderen kommunizieren.<br/>
        Die Lösung hierfür lautet: Networking<br/>
    </p>
    
    <p>
        Damit Container untereinander kommunizieren können müssen diese Bestandteil des gleichen Netzwerken sein. <br/>
        Wir merken uns dazu einfach die folgende Regel:<br/>
        Wenn zwei Container im selben Netzwerk sind können sie untereinander kommunizieren. Wenn nicht, dann nicht!
    </p>
    
    <h2>Erstellen eines Netzwerkes für die Kommunikation der Container untereinander</h2>
    <p>
        In den nächsten Schritten bedienen wir uns einer Lösung, die aus 2 Containeranwendungen besteht.<br/>
        Die erste Anwendung ist ein Web-Frontend, die als Benutzerschnittstelle für  die Verwaltung von To-Do-Einträge dient.<br/>
        Wir kennen diese ja bereits aus den bisherigen Schritten.<br/>
        Diesmal allerdings werden wir die bestehende Anwendung so konfigurieren, dass diese ihre Daten in einer eigenen SQL-Datenbank speichert, dazu also mit einem Microsoft SQL-Server kommunizieren muss.
    </p>
    <p>
        Von Microsoft wird der SQL-Server auch als Docker-Image bereitgestellt.<br/>
        Für unser Tutorial verwenden wir das Linux-Image für den SQL-Server 2019 als zweite Container-Anwendung.<br/>
    </p>
    <h2>Schritt-für-Schritt Anleitung</h2>
    <ol>
        <li>
            Erstellen einer neuen Serverinstanz <code class="highlight">+ NEW INSTANCE</code>
        </li>
        <li>
            Erstellen eines benannten Netzwerkes
            <code class="highlight">docker network create todo-net</code>
        </li>
        <li>
            Starten von SQL-Server und verbinden mit dem Netzwerk
            <code class="highlight">docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=P@ssw0rd123!' -p 1433:1433 -d --network todo-net --network-alias sqldb mcr.microsoft.com/mssql/server:2019-latest</code>
        </li>
        <li>
            Starten der Tutorial-Lösung<br/>
            Diemal starten wir die Tutorial-Instanz und verbinden die mit dem gleichen Netzwerk wie den SQL-Server. Zudem übergeben wir einen weiteren Parameter, der besagt, das das Tutorial den SQL-Server als Backend verwenden soll.
            <code class="highlight">docker run -d -p 80:80 --network todo-net -e USE_SQL_SERVER=true maddev77/workshop-getting-started</code>

        </li>
    </ol>
    
    <p>
        Nachdem wie oben angegeben beide Containerinstanzen gestartet sind, können wir wie bisher ein paar To-Do-Einträge erfassen.<br/>
        Diesmal jedoch werden die Einträge in der Datenbank auf der SQL-Server-Instanz gespeichert.<br/>
        Bevor wir fortfahren, gucken wir uns das Ganze einmal genauer an...
    </p>

    <h2>Zusammenfassung</h2>
    <p>
        Zu diesem Zeitpunkt haben wir eine laufende Lösung, die aus zwei seperaten Containeranwendungen besteht - und Wir haben etwas über Container-Netzwerke erfahren.<br/>
        Als Einsteiger dürfte man jetzt allerdings auch langsam etwas überfordert werden. Insbesondere wenn man an die doch langen Aufrufe denkt, die teilweise mit spezifischen Parametern zu einzelnen Containerlösungen ergänzt werden.
        Zudem ist das Beenden und Starten der Container doch recht aufwendig auf Dauer.<br/>
        Aber keine Angst: Die war nur der Einführung geschuldet um einen Einblick zu bekommen!<br/>
        Im nächsten Schritt schauen wir uns Docker Compose an. Docker Compose macht es uns wesentlich einfacher unsere Lösung hochzufahren.
    </p>

    <h2 id="next-steps">Nächste Schritte</h2>
    <ul>
        <li>Container Orchestrierung: <a href="./DockerComposeIntro">Schritt 4: Einführung in docker-compose</a></li>
    </ul>

</div>
